const mongoose = require('mongoose');
const User = require('./models/User');
const Transaction = require('./models/Transaction');
const ReferralTransaction = require('./models/ReferralTransaction');
const Referral = require('./models/Referral');
const UserShare = require('./models/UserShare'); // Add UserShare model

async function investigateReferralPayments() {
  try {
    // Connect to MongoDB
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb+srv://Ben:iOBkvnsCXWpoGMFp@cluster0.l4xjq.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0', {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    console.log('Connected to MongoDB');

    // Find the user with the referral code "Saint2talk"
    const referrerUser = await User.findOne({ userName: "Saint2talk" });

    if (!referrerUser) {
      console.log('No user found with referral code: Saint2talk');
      await mongoose.connection.close();
      return;
    }

    // Find users referred by "Saint2talk"
    const referredUsers = await User.find({ "referralInfo.code": "Saint2talk" });
    console.log(`Total referred users: ${referredUsers.length}`);

    // Collect referred user IDs
    const referredUserIds = referredUsers.map(user => user._id);

    // Detailed investigation results
    const paymentInvestigation = {
      referrerDetails: {
        id: referrerUser._id,
        name: referrerUser.name,
        email: referrerUser.email,
        userName: referrerUser.userName
      },
      referredUsers: []
    };

    // Get referrer's referral earnings
    const referrerReferralStats = await Referral.findOne({ user: referrerUser._id });
    paymentInvestigation.referrerDetails.referralStats = referrerReferralStats ? {
      totalEarnings: referrerReferralStats.totalEarnings,
      referredUsers: referrerReferralStats.referredUsers,
      generation1: referrerReferralStats.generation1,
      generation2: referrerReferralStats.generation2,
      generation3: referrerReferralStats.generation3
    } : null;

    // Get referrer's share information
    const referrerShares = await UserShare.findOne({ user: referrerUser._id });
    paymentInvestigation.referrerDetails.shares = referrerShares ? {
      totalShares: referrerShares.totalShares,
      transactionCount: referrerShares.transactions.length
    } : null;

    // Investigate each referred user
    for (const user of referredUsers) {
      // Find transactions for this user
      const userTransactions = await Transaction.find({ 
        userId: user._id, 
        status: 'completed' 
      }).sort({ createdAt: -1 });

      // Find referral transactions generated by this user's purchases
      const referralTransactions = await ReferralTransaction.find({
        referredUser: user._id
      }).populate('beneficiary', 'name userName email');

      // Find user shares
      const userShares = await UserShare.findOne({ user: user._id });

      // Find referral record for the user
      const referralRecord = await Referral.findOne({ 
        user: referrerUser._id, 
        'referrals.userId': user._id 
      });

      const userInvestigation = {
        user: {
          id: user._id,
          name: user.name,
          userName: user.userName,
          email: user.email,
          joinedAt: user.createdAt
        },
        // Share information
        shares: userShares ? {
          totalShares: userShares.totalShares,
          transactions: userShares.transactions.map(tx => ({
            transactionId: tx.transactionId,
            shares: tx.shares,
            pricePerShare: tx.pricePerShare,
            totalAmount: tx.totalAmount,
            currency: tx.currency,
            paymentMethod: tx.paymentMethod,
            status: tx.status,
            adminAction: tx.adminAction || false,
            createdAt: tx.createdAt
          }))
        } : { totalShares: 0, transactions: [] },
        transactions: userTransactions.map(tx => ({
          id: tx._id,
          amount: tx.amount,
          currency: tx.currency,
          type: tx.type,
          shares: tx.shares,
          status: tx.status,
          paymentMethod: tx.paymentMethod,
          createdAt: tx.createdAt
        })),
        referralTransactions: referralTransactions.map(rtx => ({
          id: rtx._id,
          amount: rtx.amount,
          currency: rtx.currency,
          generation: rtx.generation,
          purchaseType: rtx.purchaseType,
          status: rtx.status,
          beneficiary: rtx.beneficiary ? {
            id: rtx.beneficiary._id,
            name: rtx.beneficiary.name,
            userName: rtx.beneficiary.userName
          } : null,
          createdAt: rtx.createdAt
        })),
        referralRecord: referralRecord ? {
          referralId: referralRecord._id,
          generation: referralRecord.referrals.find(r => r.userId.toString() === user._id.toString())
        } : null
      };

      paymentInvestigation.referredUsers.push(userInvestigation);
    }

    // Calculate total payments, shares, and referral earnings
    const totalUserPayments = paymentInvestigation.referredUsers.reduce((sum, user) => {
      return sum + user.transactions.reduce((txSum, tx) => txSum + tx.amount, 0);
    }, 0);

    const totalReferralEarnings = paymentInvestigation.referredUsers.reduce((sum, user) => {
      return sum + user.referralTransactions.reduce((rtxSum, rtx) => rtxSum + rtx.amount, 0);
    }, 0);

    const totalShares = paymentInvestigation.referredUsers.reduce((sum, user) => {
      return sum + (user.shares ? user.shares.totalShares : 0);
    }, 0);

    console.log('\n--- Payment and Share Investigation Summary ---');
    console.log(`Total Referred Users: ${referredUsers.length}`);
    console.log(`Total Payments from Referred Users: ${totalUserPayments.toFixed(2)}`);
    console.log(`Total Shares Owned by Referred Users: ${totalShares}`);
    console.log(`Total Referral Earnings: ${totalReferralEarnings.toFixed(2)}`);

    // Print detailed breakdown
    console.log('\n--- REFERRER DETAILS ---');
    console.log(`Name: ${paymentInvestigation.referrerDetails.name} (${paymentInvestigation.referrerDetails.userName})`);
    console.log(`Email: ${paymentInvestigation.referrerDetails.email}`);

    if (paymentInvestigation.referrerDetails.referralStats) {
      console.log('Referral Stats:');
      console.log(`  Total Earnings: ${paymentInvestigation.referrerDetails.referralStats.totalEarnings}`);
      console.log(`  Total Referred Users: ${paymentInvestigation.referrerDetails.referralStats.referredUsers}`);
      console.log(`  Gen 1: ${JSON.stringify(paymentInvestigation.referrerDetails.referralStats.generation1)}`);
      console.log(`  Gen 2: ${JSON.stringify(paymentInvestigation.referrerDetails.referralStats.generation2)}`);
      console.log(`  Gen 3: ${JSON.stringify(paymentInvestigation.referrerDetails.referralStats.generation3)}`);
    } else {
      console.log('No referral stats found for this user');
    }

    if (paymentInvestigation.referrerDetails.shares) {
      console.log('Shares:');
      console.log(`  Total Shares: ${paymentInvestigation.referrerDetails.shares.totalShares}`);
      console.log(`  Transaction Count: ${paymentInvestigation.referrerDetails.shares.transactionCount}`);
    } else {
      console.log('No shares found for this user');
    }

    console.log('\n--- REFERRED USERS DETAILS ---');
    paymentInvestigation.referredUsers.forEach((user, index) => {
      console.log(`\n[User ${index + 1}] ${user.user.name} (${user.user.email})`);
      
      console.log('Shares:');
      if (user.shares && user.shares.totalShares > 0) {
        console.log(`  Total Shares: ${user.shares.totalShares}`);
        console.log('  Share Transactions:');
        user.shares.transactions.forEach(tx => {
          console.log(`    - Shares: ${tx.shares}, Amount: ${tx.totalAmount} ${tx.currency}, Status: ${tx.status}, Method: ${tx.paymentMethod}`);
        });
      } else {
        console.log('  No shares found for this user');
      }
      
      console.log('Payment Transactions:');
      if (user.transactions.length > 0) {
        user.transactions.forEach(tx => {
          console.log(`  - Amount: ${tx.amount} ${tx.currency}, Type: ${tx.type}, Shares: ${tx.shares}, Status: ${tx.status}`);
        });
      } else {
        console.log('  No payment transactions found');
      }
      
      console.log('Referral Transactions (earnings for referring this user):');
      if (user.referralTransactions.length > 0) {
        user.referralTransactions.forEach(rtx => {
          console.log(`  - Amount: ${rtx.amount} ${rtx.currency}, Generation: ${rtx.generation}, Type: ${rtx.purchaseType}, Status: ${rtx.status}`);
          if (rtx.beneficiary) {
            console.log(`    Beneficiary: ${rtx.beneficiary.name} (${rtx.beneficiary.userName})`);
          }
        });
      } else {
        console.log('  No referral transactions found');
      }
    });

    // Save the investigation results to a file
    const fs = require('fs');
    fs.writeFileSync('referral_investigation_results.json', JSON.stringify(paymentInvestigation, null, 2));
    console.log('\nDetailed results saved to referral_investigation_results.json');

    await mongoose.connection.close();
    console.log('MongoDB connection closed');

    return paymentInvestigation;

  } catch (error) {
    console.error('Error investigating referral payments:', error);
    if (mongoose.connection.readyState !== 0) {
      await mongoose.connection.close();
    }
    throw error;
  }
}

// Run the investigation
investigateReferralPayments()
  .then(() => console.log('Referral payments investigation completed'))
  .catch(error => console.error('Investigation failed:', error));

module.exports = investigateReferralPayments;